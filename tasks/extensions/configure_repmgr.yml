# Note: this step might be necessary for new installations on slower cloud platforms
#       might make sense to check if it is really needed
- name: PostgreSQL | Restart PostgreSQL to implement changes
  service:
    name: "{{ postgresql_service_name }}"
    state: reloaded
    enabled: yes
  when: repmgr_is_new_installation is defined and repmgr_is_new_installation is true

- name: Repmgr | Make sure the repmgr user is present
  postgresql_user:
    name: "{{ repmgr_user }}"
    password: "{{ repmgr_password }}"
    role_attr_flags: SUPERUSER
    port: "{{postgresql_port}}"
    state: present
    login_user: "{{ postgresql_admin_user }}"
  no_log: true
  become: yes
  become_user: "{{ postgresql_admin_user }}"
  when: repmgr_primary or repmgr_witness|default(false)

- name: Repmgr | Make sure the repmgr database is present
  postgresql_db:
    name: "{{ repmgr_database }}"
    owner: "{{ repmgr_user }}"
    encoding: "UTF-8"
    lc_collate: "{{ postgresql_locale }}"
    lc_ctype: "{{ postgresql_ctype }}"
    port: "{{postgresql_port}}"
    template: "template0"
    state: present
    login_user: "{{ postgresql_admin_user }}"
  become: yes
  become_user: "{{ postgresql_admin_user }}"
  when: repmgr_primary or repmgr_witness|default(false)

- name: Repmgr | Update the user privileges
  postgresql_user:
    name: "{{ repmgr_user }}"
    db: "{{ repmgr_database }}"
    port: "{{ postgresql_port }}"
    priv: "ALL"
    state: present
    login_user: "{{postgresql_admin_user}}"
    role_attr_flags: "SUPERUSER,REPLICATION"
  become: yes
  become_user: "{{postgresql_admin_user}}"
  no_log: true
  when: repmgr_primary or repmgr_witness|default(false)

- name: Repmgr | Update configuration (repmgr.conf)
  template:
    src: "repmgr.conf-{{ repmgr_version[:3] }}.j2"
    dest: "{{postgresql_conf_directory}}/repmgr.conf"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  notify: restart repmgr

- name: Repmgr | Ensure systemd drop-in directory exists (not Debian)
  file:
    path: "/etc/systemd/system/repmgr{{postgresql_version}}.service.d/"
    state: directory
    mode: 0755
  when: ansible_os_family != 'Debian'

- name: Repmgr | Update drop-in (not Debian)
  template:
    src: "repmgr.custom.conf.j2"
    dest: "/etc/systemd/system/repmgr{{postgresql_version}}.service.d/custom.conf"
  when: ansible_os_family != 'Debian'

- name: Repmgr | Create systemd unit file (Debian)
  template:
    src: "repmgr-systemd.service.j2"
    dest: "/lib/systemd/system/repmgr@.service"
    mode: 0755
  when: ansible_os_family == 'Debian'

- name: Repmgr | Delete /etc/init.d/repmgrd (Debian)
  file:
    path: /etc/init.d/repmgrd
    state: absent
  when: ansible_os_family == 'Debian'

- name: Repmgr | Allow passwordless restarts with postgres user
  template:
    src: "sudoers.postgresql.j2"
    dest: "/etc/sudoers.d/postgresql"
    mode: 0440

- name: Repmgr | Make sure /etc/sudoers.d is included from /etc/sudoers
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^#includedir /etc/sudoers.d'
    line: '#includedir /etc/sudoers.d'
    validate: '/usr/sbin/visudo -cf %s'

- name: Repmgr | Add the postgresql service user to the group that may use ssh
  user:
    name: "{{ postgresql_service_user }}"
    groups: "{{ postgresql_ssh_allowed_group }}"
    append: yes
  when: postgresql_ssh_allowed_group != ''

- name: Repmgr | Update .pgpass for postgres user
  template:
    src: "pgpass.j2"
    dest: "{{repmgr_passfile}}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0400
    trim_blocks: no

- name: Repmgr | Generate ssh keypair for postgres user
  command: "ssh-keygen {{ postgresql_ssh_key_args }} -f {{ postgresql_private_key_path }} -N ''"
  args:
    creates: "{{ postgresql_private_key_path }}"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: repmgr_primary

- name: Repmgr | Slurp ssh public key
  slurp:
    src: "{{ postgresql_public_key_path }}"
  register: ssh_public_key
  when: repmgr_primary

- name: Repmgr | Slurp ssh private key
  slurp:
    src: "{{ postgresql_private_key_path }}"
  register: ssh_private_key
  when: repmgr_primary

- debug:
    msg: "ssh_public_key={{ssh_public_key}}"
  when: repmgr_primary

- name: Repmgr | Update authorized_keys for postgres user
  authorized_key:
    user: "{{ postgresql_service_user }}"
    state: present
    key: "{% for host, vars in hostvars.items() if 'repmgr_primary' in vars and vars['repmgr_primary'] == True %}{{ vars['ssh_public_key']['content'] | b64decode }}{% endfor %}"

- name: Repmgr | Update public ssh key for postgres user
  copy:
    content: "{% for host, vars in hostvars.items() if 'repmgr_primary' in vars and vars['repmgr_primary'] == True %}{{ vars['ssh_public_key']['content'] | b64decode }}{% endfor %}"
    dest: "{{ postgresql_public_key_path }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0644

- name: Repmgr | Update private ssh key for postgres user
  copy:
    content: "{% for host, vars in hostvars.items() if 'repmgr_primary' in vars and vars['repmgr_primary'] == True %}{{ vars['ssh_private_key']['content'] | b64decode }}{% endfor %}"
    dest: "{{ postgresql_private_key_path }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0600

# NOTE: ssy-kescan MAY NOT use '-H' to hash the entry, otherwise we will always get different entries
- name: Repmgr | Write host keys of all hosts to known_hosts
  lineinfile:
    path: "{{ postgresql_ssh_dir }}/known_hosts"
    create: yes
    state: present
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
    line: "{{ lookup('pipe', 'ssh-keyscan -t' + item[0] + ' -p' + repmgr_ssh_port|string + ' ' + item[1]) }}"
  loop: "{{ ['rsa', 'ed25519'] |product(repmgr_target_hosts)|list }}"

- name: Repmgr | Check cluster status
  command: "{{postgresql_bin_directory}}/repmgr -f {{postgresql_conf_directory}}/repmgr.conf cluster show"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  changed_when: repmgr_cluster_show.rc != 0
  register: repmgr_cluster_show
  ignore_errors: True

- name: Repmgr | Register as primary
  command: "{{postgresql_bin_directory}}/repmgr -f {{postgresql_conf_directory}}/repmgr.conf primary register"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: repmgr_primary and not ansible_hostname in repmgr_cluster_show.stdout and not "primary" in repmgr_cluster_show.stdout

- name: Repmgr | Ensure postgresql replica is stopped before clone
  service:
    name: "{{ ('postgresql-'+ postgresql_version|string) if (ansible_os_family != 'Debian') else ('postgresql@' + postgresql_version|string + '-' + postgresql_cluster_name) }}"
    state: stopped
  when: not repmgr_primary and not ansible_hostname in repmgr_cluster_show.stdout and not "standby" in repmgr_cluster_show.stdout and not repmgr_witness|default(false)

- name: Repmgr | Clone standby
  command: "{{postgresql_bin_directory}}/repmgr -F -h {% for host, vars in hostvars.items() if 'repmgr_primary' in vars and vars['repmgr_primary'] == True %}{{ host }}{% endfor %} -U repmgr -d repmgr -f {{postgresql_conf_directory}}/repmgr.conf standby clone"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: not repmgr_primary and not ansible_hostname in  repmgr_cluster_show.stdout and not "standby" in repmgr_cluster_show.stdout and not repmgr_witness|default(false)

- name: Repmgr | Ensure postgresql replica is running after clone
  service:
    name: "{{ ('postgresql-'+ postgresql_version|string) if (ansible_os_family != 'Debian') else ('postgresql@' + postgresql_version|string + '-' + postgresql_cluster_name) }}"
    state: started
  when: not repmgr_primary and not repmgr_witness|default(false)

- name: Repmgr | Wait for Postgres
  wait_for:
    timeout: 2
  become: no
  delegate_to: localhost

- name: Repmgr | Register standby
  command: "{{postgresql_bin_directory}}/repmgr -F -h {% for host, vars in hostvars.items() if 'repmgr_primary' in vars and vars['repmgr_primary'] == True %}{{ host }}{% endfor %} -U repmgr -d repmgr -f {{postgresql_conf_directory}}/repmgr.conf standby register"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: not repmgr_primary and not ansible_hostname in repmgr_cluster_show.stdout and not "standby" in repmgr_cluster_show.stdout and not repmgr_witness|default(false)

- name: Repmgr | Register witness
  command: "{{postgresql_bin_directory}}/repmgr -F -h {% for host, vars in hostvars.items() if 'repmgr_primary' in vars and vars['repmgr_primary'] == True %}{{ host }}{% endfor %} -U repmgr -d repmgr -f {{postgresql_conf_directory}}/repmgr.conf witness register"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: repmgr_witness|default(false) and not repmgr_primary and not ansible_hostname in repmgr_cluster_show.stdout and not "standby" in repmgr_cluster_show.stdout

- name: Repmgr | Verify cluster functionality
  command: "{{postgresql_bin_directory}}/repmgr -F -h {% for host, vars in hostvars.items() if 'repmgr_primary' in vars and vars['repmgr_primary'] == True %}{{ host }}{% endfor %} -U repmgr -d repmgr -f {{postgresql_conf_directory}}/repmgr.conf cluster crosscheck"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  changed_when: false
  any_errors_fatal: true

- name: Repmgr | Ensure repmgrd is running (not Debian)
  service:
    name: "repmgr{{postgresql_version}}"
    state: started
    enabled: yes
  when: (repmgr_monitoring_history == "true" or repmgr_failover == "automatic") and ansible_os_family != 'Debian'

- name: Repmgr | Ensure repmgrd is running (Debian)
  systemd:
    name: "repmgr@{{ postgresql_version }}-{{ postgresql_cluster_name }}"
    state: started
    daemon_reload: yes
    enabled: yes
  when: ansible_os_family == 'Debian'

- name: Repmgr | Ensure crontab is installed
  package:
    name: crontabs
  when: (repmgr_monitoring_history == "true" or repmgr_failover == "automatic") and (ansible_distribution == "RedHat" or ansible_distribution == "CentOS")

- name: Repmgr | Ensure crond is running
  service:
    name: "{{ 'cron' if (ansible_os_family == 'Debian') else 'crond' }}"
    state: started
    enabled: yes

- name: Repmgr | Setup cluster monitoring history cleanup
  copy:
    content: "{{ postgresql_bin_directory }}/repmgr -f {{postgresql_conf_directory}}/repmgr.conf cluster cleanup --keep-history={{repmgr_keep_history_days}}"
    dest: "/etc/cron.daily/repmgr_cleanup"
    mode: 0755
  when: repmgr_monitoring_history == "true" or repmgr_failover == "automatic"
