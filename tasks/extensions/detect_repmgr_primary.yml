- name: Repmgr | Detect primary
  shell: "set -o pipefail ; {{ postgresql_bin_directory }}/repmgr -f {{ postgresql_conf_directory }}/repmgr.conf cluster show | grep primary | cut -d '|' -f 2 | sed 's/\ //g'"
  args:
    executable: /bin/bash
  register: repmgr_primary_check
  become: yes
  become_user: postgres
  ignore_errors: True

- name: Repmgr | Declare as primary for existing installation
  set_fact:
    repmgr_primary: true
  register: repmgr_existing_installation_detected
  when: "repmgr_primary_check.rc == 0 and repmgr_primary_check.stdout == ansible_hostname"

- name: Repmgr | Share state between hosts
  delegate_to: localhost
  delegate_facts: True
  set_fact:
    repmgr_primary_declared: True
  when: "repmgr_existing_installation_detected is not skipped"

- name: Repmgr | Declare as primary for new installation
  set_fact:
    repmgr_primary: "{{ true if ansible_hostname == ansible_play_hosts[0] or inventory_hostname == ansible_play_hosts[0] else false }}"
  when: "hostvars['localhost'].get('repmgr_primary_declared', false) != true"

- name: Repmgr | Set repmgr_primary_hostname variable
  set_fact:
    repmgr_primary_hostname: "{{ ansible_play_hosts | map('extract',hostvars) | selectattr('repmgr_primary','defined') | selectattr('repmgr_primary','equalto',true) | map(attribute='inventory_hostname') | list | first }}"

- debug:
    var: repmgr_primary

- debug:
    var: repmgr_primary_hostname

- debug:
    var: repmgr_primary_check
    verbosity: 1
